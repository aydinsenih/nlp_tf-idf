/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nlp_tf.idf;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import net.zemberek.erisim.Zemberek;
import net.zemberek.tr.yapi.TurkiyeTurkcesi;
import net.zemberek.yapi.Kelime;

/**
 *
 * @author zeynep
 */
public class nlp_tf_idf extends javax.swing.JFrame {

    /**
     * Creates new form nlp_tf_idf
     */
    public static String dosyapath;
    public static TreeMap<String,Integer> cosku=new TreeMap<String,Integer>();
    public static TreeMap<String,Integer> mutluluk=new TreeMap<String,Integer>();
    public static TreeMap<String,Integer> duygusal=new TreeMap<String,Integer>();
    public static TreeMap<String,Integer> huzunlu=new TreeMap<String,Integer>();
    public static TreeMap<String,Integer> korku=new TreeMap<String,Integer>();
    public static int coskuFrekans=0;
    public static int mutlulukFrekans=0;
    public static int duygusalFrekans=0;
    public static int huzunluFrekans=0;
    public static int korkuFrekans=0;
    public static String dokuman;
    static Zemberek zemberek=new Zemberek(new TurkiyeTurkcesi());
    public nlp_tf_idf() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Veri kumesi klasorunu seciniz");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Dosyaya yaz");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("                     Veri kumesi guncelleme");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(26, 26, 26))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        Map<String,Integer> x=new HashMap<String,Integer>();
                x.containsKey(x);
                //x.put(ozellik,x.get(x)+1);
                
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.showOpenDialog(null);
        File file = fileChooser.getSelectedFile();
        File[] files=file.listFiles();
        String dosyaIcerigi;
        for (File f : files) {
            File[] icerik=f.listFiles();
            for (File ff : icerik) {
                if(ff.isFile()){
                    try {
                        dosyapath=ff.getAbsolutePath();
                        String[] dpath=dosyapath.replace("\\", "-" ).split("-");
                        dokuman=dpath[dpath.length-2];
                        //System.out.println(dokuman);
                        if(dosyapath.contains(dokuman))
                        dosyaIcerigi=dosyaoku(ff.getAbsolutePath());
                    } catch (IOException ex) {
                        Logger.getLogger(nlp_tf_idf.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.out.println(ff.getAbsolutePath());
            }
            }
            
        }
        System.out.println("Dosyadan okuma bitti");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        BufferedWriter bw = null;
        try {
            bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File("Ozellikdeneme.txt")),"ISO-8859-9"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(nlp_tf_idf.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(nlp_tf_idf.class.getName()).log(Level.SEVERE, null, ex);
        }
         
            try {
                    int toplamFrekans = coskuFrekans+huzunluFrekans+korkuFrekans+duygusalFrekans+mutlulukFrekans;
                    int carp=1000;
                        for (Entry<String, Integer> entry : cosku.entrySet()) {
                            //double tf_idf=(double)entry.getValue()/(double)coskuFrekans*Math.log(5/DokumandaVarMi(entry.getKey()));
                            //double tf_idf=Math.log((double)entry.getValue())*Math.log(5/DokumandaVarMi(entry.getKey()));
                            double tf_idf=(double)entry.getValue()/toplamFrekans*Math.log((5/DokumandaVarMi(entry.getKey())))*carp;
                            //System.out.println(entry.getKey()+"#"+tf_idf);
                            bw.append("cosku#"+entry.getKey()+"#"+tf_idf);
                            bw.newLine();
                        }
                        for (Entry<String, Integer> entry : duygusal.entrySet()) {
                            double tf_idf=(double)entry.getValue()/toplamFrekans*Math.log((5/DokumandaVarMi(entry.getKey())))*carp;
                            bw.append("duygusal#"+entry.getKey()+"#"+tf_idf);
                            bw.newLine();
                        }
                    
                        for (Entry<String, Integer> entry : huzunlu.entrySet()) {
                            double tf_idf=(double)entry.getValue()/toplamFrekans*Math.log((5/DokumandaVarMi(entry.getKey())))*carp;
                            bw.append("huzunlu#"+entry.getKey()+"#"+tf_idf);
                            bw.newLine();
                        }
                        for (Entry<String, Integer> entry : korku.entrySet()) {
                            double tf_idf=(double)entry.getValue()/toplamFrekans*Math.log((5/DokumandaVarMi(entry.getKey())))*carp;
                            bw.append("korku#"+entry.getKey()+"#"+tf_idf);
                            bw.newLine();
                        }
                        for (Entry<String, Integer> entry : mutluluk.entrySet()) {
                            double tf_idf=(double)entry.getValue()/toplamFrekans*Math.log((5/DokumandaVarMi(entry.getKey())))*carp;
                            bw.append("mutluluk#"+entry.getKey()+"#"+tf_idf);
                            bw.newLine();
                        }
                bw.close();
                System.out.println("dosyaya yazildi");
            } catch (IOException ex) {
                Logger.getLogger(nlp_tf_idf.class.getName()).log(Level.SEVERE, null, ex);
            }
		
    }//GEN-LAST:event_jButton2ActionPerformed
    
    public static String dosyaoku(String path) throws FileNotFoundException, IOException{
        //BufferedReader br=new BufferedReader(new FileReader(new File(path)));
        BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(path)),"ISO-8859-9"));
        String line,sonuc = "";
        while((line=br.readLine())!=null){
            sonuc+=temizle(line);
        }
        //System.out.println(sonuc);
        String[] kelime= sonuc.split(" ");
        for (String kelimeCikar:kelime) {
            String maden=kelimeDenetle(kelimeCikar);
            if(maden!=null)
            mapEkle(maden);
        }
        return sonuc;
    }
    public static String kelimeDenetle(String kelime){
        if(!zemberek.kelimeDenetle(kelime)){
            String[] oneriler=zemberek.oner(kelime);
            if(oneriler.length>0){
                kelime=oneriler[0];
            }
            else{
            return null;
            }
        }
        Kelime[] kel=zemberek.kelimeCozumle(kelime);
        if(kel.length>0){
            String ozellikCikarim=kel[0].toString();
            String ozellikler=ozellikCikarim.substring(ozellikCikarim.indexOf(":")+1,ozellikCikarim.indexOf("]")-1);
            ozellikler=ozellikler.replace(", ","_");
            if(ozellikCikarim.contains("OLUMSUZLUK"))
                ozellikler=ozellikler+"_OLUMSUZ";
            //System.out.println(ozellikler);
            return ozellikler;
        }
        return null;
    }
    public static String temizle(String line){
        return line.replaceAll("[^0-9a-zA-zğşıçüöĞÖŞÇÜİ]"," ").replaceAll("\\s+"," ").replace("\\"," ");
    }
    public static double DokumandaVarMi(String kelime){
        double sonuc=0;
        if(cosku.containsKey(kelime))
            sonuc++;
        if(huzunlu.containsKey(kelime))
            sonuc++;
        if(mutluluk.containsKey(kelime))
            sonuc++;
        if(korku.containsKey(kelime))
            sonuc++;
        if(duygusal.containsKey(kelime))
            sonuc++;
        return sonuc;
    }
    public static void mapEkle(String maden){
        switch(dokuman){
                case "cosku":
                    if(cosku.containsKey(maden)){
                        cosku.put(maden, cosku.get(maden)+1);
                        coskuFrekans++;
                    }
                    else{
                        cosku.put(maden, 1);
                        coskuFrekans++;
                    }
                    break;
                case "mutluluk":
                    if(mutluluk.containsKey(maden)){
                        mutluluk.put(maden, mutluluk.get(maden)+1);
                        mutlulukFrekans++;
                    }
                    else{
                        mutluluk.put(maden, 1);
                        mutlulukFrekans++;
                    }
                    break;
                case "duygusal":
                    if(duygusal.containsKey(maden)){
                        duygusal.put(maden, duygusal.get(maden)+1);
                        duygusalFrekans++;
                    }
                    else{
                        duygusal.put(maden, 1);
                        duygusalFrekans++;
                    }
                    break;
                case "huzunlu":
                    if(huzunlu.containsKey(maden)){
                        huzunlu.put(maden, huzunlu.get(maden)+1);
                        huzunluFrekans++;
                    }
                    else{
                        huzunlu.put(maden, 1);
                        huzunluFrekans++;
                    }
                    break;
                case "korku":
                    if(korku.containsKey(maden)){
                        korku.put(maden, korku.get(maden)+1);
                        korkuFrekans++;
                    }
                    else{
                        korku.put(maden, 1);
                        korkuFrekans++;
                    }
                    break;
            }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(nlp_tf_idf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(nlp_tf_idf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(nlp_tf_idf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(nlp_tf_idf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new nlp_tf_idf().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
